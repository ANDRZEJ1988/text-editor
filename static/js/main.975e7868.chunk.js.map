{"version":3,"sources":["actions/actions.js","actions/actions-type.js","store/selectors.js","components/text/TextPage.js","functions/functions.js","assets/index.js","components/change-style/ChangeStyle.js","components/text-list/TextList.js","components/app/App.js","store/store.js","index.js"],"names":["addText","text","type","payload","textListSelector","state","statusChangeContentSelector","statusChahgeContent","TextPage","dispatch","useDispatch","textList","useSelector","statusChangeContent","areaRef","useRef","className","id","cols","rows","ref","onClick","copy","slice","stringArray","current","value","split","element","push","txt","fontSize","color","background","result","word","myFunction","tence","arg1","arg2","arg3","arrAElement","col","sizz","backs","ChangeStyle","useState","setColor","size","setSize","back","setBack","document","onselectionchange","getSelection","toString","answer","arr","length","a","reduce","previousValue","currentValue","JSON","stringify","makeJSON","name","onChange","event","target","map","index","key","TextList","style","App","initialState","statusContent","store","createStore","action","changeText","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.975e7868.chunk.js","sourcesContent":["import {\r\n    ADD_TEXT,\r\n    END_CHANGE_TEXT_CONTENT, REMOVE_CONTENT,\r\n    REMOVE_TEXT,\r\n    SAVE_TEXT,\r\n    START_CHANGE_TEXT_CONTENT\r\n} from \"./actions-type\";\r\n\r\nexport const addText = (text) => {\r\n    return ({\r\n        type: ADD_TEXT,\r\n        payload: text\r\n    })\r\n};\r\nexport const startChangeTextContent = () => {\r\n    return ({\r\n        type: START_CHANGE_TEXT_CONTENT,\r\n        payload: true\r\n    })\r\n};\r\nexport const endChangeTextContent = () => {\r\n    return ({\r\n        type: END_CHANGE_TEXT_CONTENT,\r\n        payload: false\r\n    })\r\n};\r\n\r\nexport const removeContentFunction = () => {\r\n    return ({\r\n        type: REMOVE_CONTENT,\r\n        payload: false\r\n    })\r\n};\r\n\r\nexport const saveText = (text) => {\r\n    return ({\r\n        type: SAVE_TEXT,\r\n        payload: text\r\n    })\r\n};\r\nexport const removeText = (text) => {\r\n    return ({\r\n        type: REMOVE_TEXT,\r\n        payload: text\r\n    })\r\n};\r\n","export const ADD_TEXT='ADD_TEXT';\r\nexport const CHANGE_TEXT='CHANGE_TEXT';\r\nexport const SAVE_TEXT='SAVE_TEXT';\r\nexport const END_CHANGE_TEXT_CONTENT='END_CHANGE_TEXT_CONTENT';\r\nexport const REMOVE_TEXT='REMOVE_TEXT';\r\nexport const START_CHANGE_TEXT_CONTENT='START_CHANGE_TEXT_CONTENT';\r\nexport const REMOVE_CONTENT='REMOVE_CONTENT';\r\nexport const CHANGE_TEXT_FOR_COLOR='CHANGE_TEXT';\r\nexport const CHANGE_COLOR='CHANGE_COLOR';","export const textListSelector=state=>state.text;\r\nexport const statusChangeContentSelector=state=>state.statusChahgeContent;\r\n\r\n","import React, {useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addText,\r\n    endChangeTextContent, removeContentFunction,\r\n    removeText,\r\n    saveText,\r\n    startChangeTextContent,\r\n} from \"../../actions/actions\";\r\n\r\nimport './TextPage.scss'\r\nimport {statusChangeContentSelector, textListSelector} from \"../../store/selectors\";\r\n\r\n\r\nexport const TextPage = () => {\r\n    const dispatch = useDispatch();\r\n    const textList = useSelector(textListSelector);\r\n    const statusChangeContent = useSelector(statusChangeContentSelector);\r\n    const areaRef = useRef();\r\n    const addTextFunction = () => {\r\n        const copy = textList.slice();\r\n        const stringArray = areaRef.current.value.split(' ');\r\n        for (let element of stringArray) {\r\n            copy.push({\r\n                txt: element,\r\n                fontSize: '16px',\r\n                color: 'black',\r\n                background: 'white'\r\n            });\r\n        }\r\n        dispatch(addText(copy));\r\n        areaRef.current.value = '';\r\n    };\r\n    const changeContentFunction = () => {\r\n        dispatch(startChangeTextContent());\r\n        const copy = textList.slice();\r\n        for (let element of copy) {\r\n            areaRef.current.value += element.txt + ' ';\r\n        }\r\n    };\r\n    const saveFunction = () => {\r\n        const stringArray = areaRef.current.value.split(' ');\r\n        const result = [];\r\n        for (let word of stringArray) {\r\n            result.push({\r\n                txt: word,\r\n                fontSize: '16px',\r\n                color: 'black',\r\n                background: 'white'\r\n            })\r\n        }\r\n        dispatch(saveText(result));\r\n        areaRef.current.value = '';\r\n        dispatch(endChangeTextContent());\r\n    };\r\n    const remove = () => {\r\n        const copy = [];\r\n        dispatch(removeText(copy));\r\n        dispatch(removeContentFunction());\r\n    };\r\n\r\n    return (\r\n        <div className=\"text\">\r\n            <textarea className=\"area\" id=\"\" cols=\"10\" rows=\"10\" ref={areaRef}/>\r\n            <div className='btn'>\r\n                {!statusChangeContent && <button className=\"area-btn\" onClick={addTextFunction}>add</button>}\r\n                {!statusChangeContent &&\r\n                <button className=\"area-btn\" onClick={changeContentFunction}>change content</button>}\r\n                {statusChangeContent && <button className=\"area-btn\" onClick={saveFunction}>save changes</button>}\r\n                <button className=\"area-btn\" onClick={remove}>remove</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","export const myFunction=(textList, tence,  arg1, arg2, arg3)=>{\r\n    const copy = textList.slice();\r\n    const word = tence.split(' ');\r\n    for (let text of copy) {\r\n        for (let arrAElement of word) {\r\n            if (text.txt === arrAElement) {\r\n                if (arg1)\r\n                {text.color = arg1;}\r\n                if (arg2)\r\n                {text.fontSize = arg2;}\r\n                if (arg3)\r\n                {text.background = arg3;}\r\n            }\r\n        }\r\n    }\r\n    return copy;\r\n}","export const col = ['red', 'green', 'blue'];\r\nexport const sizz = ['16px', '24px', '32px'];\r\nexport const backs = ['silver', 'yellow', 'pink'];","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {textListSelector} from \"../../store/selectors\";\r\nimport {addText} from \"../../actions/actions\";\r\nimport {myFunction} from \"../../functions/functions\";\r\nimport {backs, col, sizz} from \"../../assets\";\r\nimport './ChangeStyle.scss'\r\n\r\nexport const ChangeStyle = () => {\r\n    const textList = useSelector(textListSelector);\r\n    const dispatch = useDispatch();\r\n    const [color, setColor] = useState('');\r\n    const [size, setSize] = useState('');\r\n    const [back, setBack] = useState('');\r\n    const chooseColor = (event) => {\r\n        const color = event.target.value;\r\n        setColor(color);\r\n    };\r\n    const chooseSize = (event) => {\r\n        const size = event.target.value;\r\n        setSize(size);\r\n    };\r\n    const chooseBackground = (event) => {\r\n        const back = event.target.value;\r\n        setBack(back);\r\n    };\r\n\r\n    document.onselectionchange = function () {\r\n        let selection = document.getSelection().toString();\r\n        return selection\r\n    };\r\n    const changeColor = () => {\r\n        const tence = document.onselectionchange();\r\n        const copy = myFunction(textList, tence, color);\r\n        dispatch(addText(copy));\r\n    };\r\n    const changeSize = () => {\r\n        const tence = document.onselectionchange();\r\n        const copy = myFunction(textList, tence, null, size);\r\n        dispatch(addText(copy));\r\n    };\r\n    const changeBackground = () => {\r\n        const tence = document.onselectionchange();\r\n        const copy = myFunction(textList, tence, null, null, back);\r\n        dispatch(addText(copy));\r\n    };\r\n    const makeJSON = () => {\r\n        const copy = textList.slice();\r\n        const arr = [];\r\n        if (textList.length !== 0) {\r\n            const a = copy.reduce((previousValue, currentValue) => {\r\n                    if ((previousValue.color === currentValue.color) &&\r\n                        (previousValue.fontSize === currentValue.fontSize) &&\r\n                        (previousValue.background === currentValue.background)) {\r\n                        return (previousValue = {\r\n                            txt: previousValue.txt + ' ' + currentValue.txt,\r\n                            fontSize: previousValue.fontSize,\r\n                            color: previousValue.color,\r\n                            background: previousValue.background\r\n                        })\r\n                    }\r\n                    {\r\n                        if ((previousValue.color !== currentValue.color) &&\r\n                            (previousValue.fontSize === currentValue.fontSize) &&\r\n                            (previousValue.background === currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: currentValue.color,\r\n                                background: previousValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n\r\n                    {\r\n                        if ((previousValue.color === currentValue.color) &&\r\n                            (previousValue.fontSize !== currentValue.fontSize) &&\r\n                            (previousValue.background === currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: currentValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n\r\n                    {\r\n                        if ((previousValue.color === currentValue.color) &&\r\n                            (previousValue.fontSize === currentValue.fontSize) &&\r\n                            (previousValue.background !== currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: currentValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n                    {\r\n                        if ((previousValue.color === currentValue.color) &&\r\n                            (previousValue.fontSize !== currentValue.fontSize) &&\r\n                            (previousValue.background !== currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: currentValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: currentValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n                    {\r\n                        if ((previousValue.color !== currentValue.color) &&\r\n                            (previousValue.fontSize === currentValue.fontSize) &&\r\n                            (previousValue.background !== currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: currentValue.color,\r\n                                background: currentValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n                    {\r\n                        if ((previousValue.color !== currentValue.color) &&\r\n                            (previousValue.fontSize !== currentValue.fontSize) &&\r\n                            (previousValue.background === currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: currentValue.fontSize,\r\n                                color: currentValue.color,\r\n                                background: previousValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n                    {\r\n                        if ((previousValue.color !== currentValue.color) &&\r\n                            (previousValue.fontSize !== currentValue.fontSize) &&\r\n                            (previousValue.background !== currentValue.background)) {\r\n                            previousValue = {\r\n                                txt: previousValue.txt,\r\n                                fontSize: previousValue.fontSize,\r\n                                color: previousValue.color,\r\n                                background: previousValue.background\r\n                            };\r\n                            currentValue = {\r\n                                txt: currentValue.txt,\r\n                                fontSize: currentValue.fontSize,\r\n                                color: currentValue.color,\r\n                                background: currentValue.background\r\n                            }\r\n                            arr.push(previousValue);\r\n                            return (currentValue)\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n            arr.push(a);\r\n        }\r\n        return (JSON.stringify(arr));\r\n    };\r\n    const answer = makeJSON();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"div\">\r\n                <button onClick={changeColor}>Change color</button>\r\n                <select name=\"\" id=\"\" onChange={chooseColor}>\r\n                    {\r\n                        col.map((value, index) => {\r\n                            return (\r\n                                <option value={value} key={index}>{value}</option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n            <div className=\"div\">\r\n                <button onClick={changeSize}>Change fontSize</button>\r\n                <select name=\"\" id=\"\" onChange={chooseSize}>\r\n                    {\r\n                        sizz.map((value, index) => {\r\n                            return (\r\n                                <option value={value} key={index + 1}>{value}</option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n            <div className=\"div\">\r\n                <button onClick={changeBackground}>Change background</button>\r\n                <select name=\"\" id=\"\" onChange={chooseBackground}>\r\n                    {\r\n                        backs.map((value, index) => {\r\n                            return (\r\n                                <option value={value} key={index + 2}>{value}</option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n            <div className=\"div\">{textList.length !== 0 ? answer : ''}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {textListSelector} from \"../../store/selectors\";\r\nimport './TextList.scss'\r\n\r\nexport const TextList = () => {\r\n    const textList = useSelector(textListSelector);\r\n    const render = () => {\r\n        return (\r\n            textList.map((value, index) => {\r\n                return (\r\n                    <span  className=\"spans\" key={index} style={{\r\n                        color: value.color,\r\n                        fontSize: value.fontSize,\r\n                        background: value.background\r\n                    }}>{value.txt + ' '}</span>\r\n                )\r\n            })\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"spanss\">\r\n            {render()}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {TextPage} from \"../text/TextPage\";\nimport {ChangeStyle} from \"../change-style/ChangeStyle\";\nimport {TextList} from \"../text-list/TextList\";\n\n\nexport function App() {\n    return (\n        <>\n            <TextPage/>\n            <TextList/>\n            <ChangeStyle/>\n        </>\n    );\n}\n\nexport default App;\n","import {createStore} from \"redux\";\r\n\r\nconst initialState = {\r\n    text: [\r\n        {\r\n            txt: 'Lorem',\r\n            fontSize: '16px',\r\n            color: 'black',\r\n            background: 'white'\r\n        },\r\n        {\r\n            txt: 'dolorsit',\r\n            fontSize: '16px',\r\n            color: 'black',\r\n            background: 'white'\r\n        },\r\n        {\r\n            txt: 'ametLoremipsumdolorsit',\r\n            fontSize: '16px',\r\n            color: 'black',\r\n            background: 'white'\r\n        }\r\n    ],\r\n    statusChahgeContent: false,\r\n    statusContent: false,\r\n\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TEXT':\r\n            return {...state, text: action.payload};\r\n        case 'START_CHANGE_TEXT_CONTENT':\r\n            return {...state, statusChahgeContent: action.payload};\r\n        case 'END_CHANGE_TEXT_CONTENT':\r\n            return {...state, statusChahgeContent: action.payload};\r\n        case 'SAVE_TEXT':\r\n            return {...state, text: action.payload};\r\n        case 'REMOVE_TEXT':\r\n            return {...state, text: action.payload};\r\n        case 'REMOVE_CONTENT':\r\n            return {...state, statusContent: action.payload};\r\n        case 'CHANGE_TEXT_FOR_COLOR':\r\n            return {...state, changeText: action.payload};\r\n        case 'CHANGE_COLOR':\r\n            return {...state, text: action.payload};\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\nexport const store = createStore(reducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}